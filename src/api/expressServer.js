const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const OpenApiValidator = require('express-openapi-validator');
const logger = require('./logger');
const { orm } = require('lambdaorm')
const { Kafka } = require('kafkajs')
const { KafkaLibrary } = require('./manager/kafkaLibrary')
const { KafkaConsumers } = require('./manager/kafkaConsumers')


const { Library } = require('./manager/library')
const Metrics = require('./services/Metrics')

class ExpressServer {
  constructor() {
    this.app = express();
    this.openApiPath = path.join(__dirname, 'api', 'openapi.yaml');
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(this.openApiPath));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  /**
 * Singleton
 */
  static _instance = null
  static get instance() {
    if (!this._instance) {
      this._instance = new ExpressServer()
    }
    return this._instance
  }

  setupMiddleware() {
    // this.setupAllowedMedia();
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    //Simple test to see that the server is up and responding
    this.app.get('/hello', (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/api-docs', swaggerUI.serve, swaggerUI.setup(this.schema));
    this.app.get('/login-redirect', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.get('/oauth2-redirect.html', (req, res) => {
      res.status(200);
      res.json(req.query);
    });
    this.app.use(
      OpenApiValidator.middleware({
        apiSpec: this.openApiPath,
        operationHandlers: path.join(__dirname),
        fileUploader: { dest: path.join(__dirname, 'uploaded_files') },
      }),
    );
    this.app.use(Metrics.after)
    this.app.use((err, req, res, next) => {
      // format errors
      res.status(err.status || 500).json({
        message: err.message || err,
        errors: err.errors || '',
      });
    });
  }

  async launch() {
    this.config = await this.ormInit()
    await this.kafkaInit()
    this.server = http.createServer(this.app).listen(this.config.app.port, async () => {
      const message = 'Server running at: ' + this.config.app.host + ':' + this.config.app.port + '/api-docs'
      logger.info(message)
      console.log(message)
    })
  }

  async ormInit() {
    logger.info('orm initializing...')
    const config = await orm.init(process.env.WORKSPACE || '/workspace')
    new Library(orm).load()
    if (!config.app.host) {
      config.app.host = 'http://localhost'
    }
    if (!config.app.port) {
      config.app.port = 8081
    }
    logger.info('orm initialized')
    return config
  }

  async kafkaInit() {
    if (this.config.app.kafka && this.config.app.kafka.config) {
      // https://kafka.js.org/docs/configuration
      logger.info(`kafka config: ${JSON.stringify(this.config.app.kafka.config)}`)
      this.kafka = new Kafka(this.config.app.kafka.config)
      new KafkaLibrary(orm.expressions.model, this.kafka).load()
      if (this.config.app.kafka.listeners) {
        this.kafkaConsumers = new KafkaConsumers(this.kafka)
        this.kafkaConsumers.start(this.config.app.kafka.listeners)
      }
    }
  }

  async close() {
    if (this.server !== undefined) {
      this.server.close();
      logger.info(`Server on port ${this.config.app.port} shut down`);
    }
    await orm.end()
  }
}

module.exports = ExpressServer;
